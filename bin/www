#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dmgeobot:server');
var http = require('http');
const TelegramBot = require('node-telegram-bot-api');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

var HTMLParser = require('node-html-parser');
var axios = require('axios');
var iconv = require('iconv-lite');
const conn = require('./connect');
const moment = require('moment');
var fs = require('fs');
var myArray = [];
let iterator = 289;

(async () => {
    let bool = true;
    let i = 1;
    let connection = await conn.createConn();

    //let xml = await axios.get('http://narcozona.ru/sitemap.xml');
    //console.log(xml.data);
    //var myRe = /(https?):\/\/(.+).html/ig;


/*    while ((res = myRe.exec(xml.data)) != null) {
        console.log(res[0]);
        myArray.push(res[0]);
    }

    fs.writeFileSync('message.txt', myArray);*/
    let msg = fs.readFileSync('message.txt', 'utf8');

    //console.log(msg.split(',').length);

    //let url = 'http://narcozona.ru/1757-blagopriyatnoe-lechenie.html';
    //let url = 'http://narcozona.ru/1600-zaklyuchitelnaya-dezinfekciya.html';

    let urls = msg.split(',');
    //let urls = ['http://narcozona.ru/3057-medicinskaya-vata-kak-vybrat-i-vygodno-kupit-material.html'];
    //console.log(urls);
    for (let i = 0; i < urls.length; i++) {
        console.log('url ', urls[i]);
        var root = await getHTML(urls[i]);
        //console.log(root.firstChild.structure);

        let data = getContest(root);
        if (data === null) {
            continue;
        }

        let {title, description} = data;

        let sql = 'INSERT INTO wp_posts (`post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';

        let it = [
            1,
            moment().format('YYYY-MM-DD HH:mm:ss').toString(),
            moment().format('YYYY-MM-DD HH:mm:ss').toString(),
            description,
            title,
            '',
            'publish',
            'open',
            'open',
            '',
            cyrill_to_latin(title).toLowerCase(),
            '',
            '',
            moment().format('YYYY-MM-DD HH:mm:ss').toString(),
            moment().format('YYYY-MM-DD HH:mm:ss').toString(),
            '',
            0,
            `http://34.73.15.219/?p=${iterator}`,
            0,
            'post',
            '',
            0
        ];

        await connection.execute(
            sql,
            it
        );

        console.log('finished ', iterator);
        iterator++;
    }


// { tagName: 'ul',
//   rawAttrs: 'id="list"',
//   childNodes:
//    [ { tagName: 'li',
//        rawAttrs: '',
//        childNodes: [Object],
//        classNames: [] } ],
//   id: 'list',
//   classNames: [] }
    //console.log(root.toString());
// <ul id="list"><li>Hello World</li></ul>
    /*root.set_content('<li>Hello World</li>');
    root.toString();	// <li>Hello World</li>*/
})();

const arrru = ['(', ')', '–', ' ', 'Я', 'я', 'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А', 'а', 'Б', 'б', 'В', 'в', 'Г', 'г', 'Д', 'д', 'Е', 'е', 'Ё', 'ё', 'З', 'з', 'И', 'и', 'Й', 'й', 'К', 'к', 'Л', 'л', 'М', 'м', 'Н', 'н', 'О', 'о', 'П', 'п', 'Р', 'р', 'С', 'с', 'Т', 'т', 'У', 'у', 'Ф', 'ф', 'Х', 'х', 'Ц', 'ц', 'Ы', 'ы', 'Ь', 'ь', 'Ъ', 'ъ', 'Э', 'э'];

const arren = ['', '', '-', '-', 'Ya', 'ya', 'Yu', 'yu', 'Ch', 'ch', 'Sh', 'sh', 'Sh', 'sh', 'Zh', 'zh', 'A', 'a', 'B', 'b', 'V', 'v', 'G', 'g', 'D', 'd', 'E', 'e', 'E', 'e', 'Z', 'z', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u', 'F', 'f', 'H', 'h', 'C', 'c', 'Y', 'y', '', '', '\'', '\'', 'E', 'e'];

function cyrill_to_latin(text) {
    for (var i = 0; i < arrru.length; i++) {
        var reg = new RegExp(arrru[i], "g");
        text = text.replace(reg, arren[i]);
    }
    return text.replace(/-+/gm, '-');
}

async function getHTML(url) {
    try {
        const response = await axios.request({
            method: 'GET',
            url: url,
            responseType: 'arraybuffer',
            responseEncoding: 'binary'
        });
        //let html = iso88592.decode(response.data.toString('binary'));
        let html = iconv.encode(iconv.decode(response.data, "cp1251"), "utf8").toString();

        //console.log(html);
        //var root = HTMLParser.parse('<ul id="list"><li>Hello World</li></ul>');
        html = html.replace(/<a(\/?[^>]+)>(\/?[^>]+)(><\/a>|<\/a>)/gi, ' ');
        return HTMLParser.parse(html);
    } catch (e) {
        console.error('bad url: ', url);
        return HTMLParser.parse('<b></b>');
    }
}

function getContest(root) {
    let div = root.querySelector('#dle-content');

    if (!div || !div.querySelector('.staticli')) {
        return null;
    }

    let arr = div.querySelector('.staticli').querySelectorAll('p').map((item, key) => {
        //console.log(key, item.toString())
        return item.innerHTML;
    }).filter((item) => item !== '' || !(/ *$/ig.test(item)));
    arr.pop();

    let title = div.querySelector('h1').innerHTML;
    let description = div.querySelector('.staticli').innerHTML;
    return {title, description};
    /*let description = arr.join('<!-- /wp:paragraph -->' +
        '\n' +
        '<!-- wp:paragraph -->');

    description = '<!-- wp:paragraph -->' + description + '<!-- /wp:paragraph -->'

    return {title, description};*/
}
